
#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:24

___

### lte

▸ **lte**(`other`): `boolean`

#### Parameters

| Name | Type |
| :------ | :------ |
| `other` | [`BigNumberish`](../modules.md#bignumberish) |

#### Returns

`boolean`

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:25

___

### mask

▸ **mask**(`value`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `value` | `number` |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:20

___

### mod

▸ **mod**(`other`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `other` | [`BigNumberish`](../modules.md#bignumberish) |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:15

___

### mul

▸ **mul**(`other`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `other` | [`BigNumberish`](../modules.md#bignumberish) |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:14

___

### or

▸ **or**(`other`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `other` | [`BigNumberish`](../modules.md#bignumberish) |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:18

___

### pow

▸ **pow**(`other`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `other` | [`BigNumberish`](../modules.md#bignumberish) |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:16

___

### shl

▸ **shl**(`value`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `value` | `number` |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:21

___

### shr

▸ **shr**(`value`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `value` | `number` |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:22

___

### sub

▸ **sub**(`other`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `other` | [`BigNumberish`](../modules.md#bignumberish) |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:12

___

### toBigInt

▸ **toBigInt**(): `bigint`

#### Returns

`bigint`

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:31

___

### toHexString

▸ **toHexString**(): `string`

#### Returns

`string`

#### Implementation of

Hexable.toHexString

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:33

___

### toJSON

▸ **toJSON**(`key?`): `any`

#### Parameters

| Name | Type |
| :------ | :------ |
| `key?` | `string` |

#### Returns

`any`

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:34

___

### toNumber

▸ **toNumber**(): `number`

#### Returns

`number`

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:30

___

### toString

▸ **toString**(): `string`

#### Returns

`string`

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:32

___

### toTwos

▸ **toTwos**(`value`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `value` | `number` |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:9

___

### xor

▸ **xor**(`other`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `other` | [`BigNumberish`](../modules.md#bignumberish) |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:19

___

### from

▸ `Static` **from**(`value`): [`BigNumber`](BigNumber.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `value` | `any` |

#### Returns

[`BigNumber`](BigNumber.md)

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:35

___

### isBigNumber

▸ `Static` **isBigNumber**(`value`): value is BigNumber

#### Parameters

| Name | Type |
| :------ | :------ |
| `value` | `any` |

#### Returns

value is BigNumber

#### Defined in

node_modules/@ethersproject/bignumber/lib/bignumber.d.ts:36


================================================================================
File: docs-md\classes\Contract.md
Size: 12.97 kB
================================================================================

[alchemy-sdk](../README.md) / [Exports](../modules.md) / Contract

# Class: Contract

The Contract class is a wrapper around the Contract class from ethers.js and
is exported here for convenience.

## Hierarchy

- `Contract`

  ↳ **`Contract`**

## Table of contents

### Constructors

- [constructor](Contract.md#constructor)

### Properties

- [\_deployedPromise](Contract.md#_deployedpromise)
- [\_runningEvents](Contract.md#_runningevents)
- [\_wrappedEmits](Contract.md#_wrappedemits)
- [address](Contract.md#address)
- [callStatic](Contract.md#callstatic)
- [deployTransaction](Contract.md#deploytransaction)
- [estimateGas](Contract.md#estimategas)
- [filters](Contract.md#filters)
- [functions](Contract.md#functions)
- [interface](Contract.md#interface)
- [populateTransaction](Contract.md#populatetransaction)
- [provider](Contract.md#provider)
- [resolvedAddress](Contract.md#resolvedaddress)
- [signer](Contract.md#signer)

### Methods

- [\_checkRunningEvents](Contract.md#_checkrunningevents)
- [\_deployed](Contract.md#_deployed)
- [\_wrapEvent](Contract.md#_wrapevent)
- [attach](Contract.md#attach)
- [connect](Contract.md#connect)
- [deployed](Contract.md#deployed)
- [emit](Contract.md#emit)
- [fallback](Contract.md#fallback)
- [listenerCount](Contract.md#listenercount)
- [listeners](Contract.md#listeners)
- [off](Contract.md#off)
- [on](Contract.md#on)
- [once](Contract.md#once)
- [queryFilter](Contract.md#queryfilter)
- [removeAllListeners](Contract.md#removealllisteners)
- [removeListener](Contract.md#removelistener)
- [getContractAddress](Contract.md#getcontractaddress)
- [getInterface](Contract.md#getinterface)
- [isIndexed](Contract.md#isindexed)

## Constructors

### constructor

• **new Contract**(`addressOrName`, `contractInterface`, `signerOrProvider?`)

#### Parameters

| Name | Type |
| :------ | :------ |
| `addressOrName` | `string` |
| `contractInterface` | `ContractInterface` |
| `signerOrProvider?` | `Signer` \| `Provider` |

#### Inherited from

EthersContract.constructor

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:107

## Properties

### \_deployedPromise

• **\_deployedPromise**: `Promise`<`Contract`\>

#### Inherited from

EthersContract.\_deployedPromise

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:100

___

### \_runningEvents

• **\_runningEvents**: `Object`

#### Index signature

▪ [eventTag: `string`]: `RunningEvent`

#### Inherited from

EthersContract.\_runningEvents

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:101

___

### \_wrappedEmits

• **\_wrappedEmits**: `Object`

#### Index signature

▪ [eventTag: `string`]: (...`args`: `any`[]) => `void`

#### Inherited from

EthersContract.\_wrappedEmits

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:104

___

### address

• `Readonly` **address**: `string`

#### Inherited from

EthersContract.address

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:79

___

### callStatic

• `Readonly` **callStatic**: `Object`

#### Index signature

▪ [name: `string`]: `ContractFunction`

#### Inherited from

EthersContract.callStatic

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:86

___

### deployTransaction

• `Readonly` **deployTransaction**: [`TransactionResponse`](../interfaces/TransactionResponse.md)

#### Inherited from

EthersContract.deployTransaction

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:99

___

### estimateGas

• `Readonly` **estimateGas**: `Object`

#### Index signature

▪ [name: `string`]: `ContractFunction`<[`BigNumber`](BigNumber.md)\>

#### Inherited from

EthersContract.estimateGas

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:89

___

### filters

• `Readonly` **filters**: `Object`

#### Index signature

▪ [name: `string`]: (...`args`: `any`[]) => `EventFilter`

#### Inherited from

EthersContract.filters

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:95

___

### functions

• `Readonly` **functions**: `Object`

#### Index signature

▪ [name: `string`]: `ContractFunction`

#### Inherited from

EthersContract.functions

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:83

___

### interface

• `Readonly` **interface**: [`Interface`](Utils.Interface.md)

#### Inherited from

EthersContract.interface

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:80

___

### populateTransaction

• `Readonly` **populateTransaction**: `Object`

#### Index signature

▪ [name: `string`]: `ContractFunction`<`PopulatedTransaction`\>

#### Inherited from

EthersContract.populateTransaction

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:92

___

### provider

• `Readonly` **provider**: `Provider`

#### Inherited from

EthersContract.provider

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:82

___

### resolvedAddress

• `Readonly` **resolvedAddress**: `Promise`<`string`\>

#### Inherited from

EthersContract.resolvedAddress

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:98

___

### signer

• `Readonly` **signer**: `Signer`

#### Inherited from

EthersContract.signer

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:81

## Methods

### \_checkRunningEvents

▸ **_checkRunningEvents**(`runningEvent`): `void`

#### Parameters

| Name | Type |
| :------ | :------ |
| `runningEvent` | `RunningEvent` |

#### Returns

`void`

#### Inherited from

EthersContract.\_checkRunningEvents

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:121

___

### \_deployed

▸ **_deployed**(`blockTag?`): `Promise`<`Contract`\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `blockTag?` | [`BlockTag`](../modules.md#blocktag) |

#### Returns

`Promise`<`Contract`\>

#### Inherited from

EthersContract.\_deployed

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:114

___

### \_wrapEvent

▸ **_wrapEvent**(`runningEvent`, `log`, `listener`): `Event`

#### Parameters

| Name | Type |
| :------ | :------ |
| `runningEvent` | `RunningEvent` |
| `log` | [`Log`](../interfaces/Log.md) |
| `listener` | `Listener` |

#### Returns

`Event`

#### Inherited from

EthersContract.\_wrapEvent

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:122

___

### attach

▸ **attach**(`addressOrName`): `Contract`

#### Parameters

| Name | Type |
| :------ | :------ |
| `addressOrName` | `string` |

#### Returns

`Contract`

#### Inherited from

EthersContract.attach

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:117

___

### connect

▸ **connect**(`signerOrProvider`): `Contract`

#### Parameters

| Name | Type |
| :------ | :------ |
| `signerOrProvider` | `string` \| `Signer` \| `Provider` |

#### Returns

`Contract`

#### Inherited from

EthersContract.connect

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:116

___

### deployed

▸ **deployed**(): `Promise`<`Contract`\>

#### Returns

`Promise`<`Contract`\>

#### Inherited from

EthersContract.deployed

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:113

___

### emit

▸ **emit**(`eventName`, ...`args`): `boolean`

#### Parameters

| Name | Type |
| :------ | :------ |
| `eventName` | `string` \| `EventFilter` |
| `...args` | `any`[] |

#### Returns

`boolean`

#### Inherited from

EthersContract.emit

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:127

___

### fallback

▸ **fallback**(`overrides?`): `Promise`<[`TransactionResponse`](../interfaces/TransactionResponse.md)\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `overrides?` | [`TransactionRequest`](../modules.md#transactionrequest) |

#### Returns

`Promise`<[`TransactionResponse`](../interfaces/TransactionResponse.md)\>

#### Inherited from

EthersContract.fallback

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:115

___

### listenerCount

▸ **listenerCount**(`eventName?`): `number`

#### Parameters

| Name | Type |
| :------ | :------ |
| `eventName?` | `string` \| `EventFilter` |

#### Returns

`number`

#### Inherited from

EthersContract.listenerCount

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:128

___

### listeners

▸ **listeners**(`eventName?`): `Listener`[]

#### Parameters

| Name | Type |
| :------ | :------ |
| `eventName?` | `string` \| `EventFilter` |

#### Returns

`Listener`[]

#### Inherited from

EthersContract.listeners

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:129

___

### off

▸ **off**(`eventName`, `listener`): [`Contract`](Contract.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `eventName` | `string` \| `EventFilter` |
| `listener` | `Listener` |

#### Returns

[`Contract`](Contract.md)

#### Inherited from

EthersContract.off

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:131

___

### on

▸ **on**(`event`, `listener`): [`Contract`](Contract.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `event` | `string` \| `EventFilter` |
| `listener` | `Listener` |

#### Returns

[`Contract`](Contract.md)

#### Inherited from

EthersContract.on

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:125

___

### once

▸ **once**(`event`, `listener`): [`Contract`](Contract.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `event` | `string` \| `EventFilter` |
| `listener` | `Listener` |

#### Returns

[`Contract`](Contract.md)

#### Inherited from

EthersContract.once

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:126

___

### queryFilter

▸ **queryFilter**(`event`, `fromBlockOrBlockhash?`, `toBlock?`): `Promise`<`Event`[]\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `event` | `string` \| `EventFilter` |
| `fromBlockOrBlockhash?` | [`BlockTag`](../modules.md#blocktag) |
| `toBlock?` | [`BlockTag`](../modules.md#blocktag) |

#### Returns

`Promise`<`Event`[]\>

#### Inherited from

EthersContract.queryFilter

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:124

___

### removeAllListeners

▸ **removeAllListeners**(`eventName?`): [`Contract`](Contract.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `eventName?` | `string` \| `EventFilter` |

#### Returns

[`Contract`](Contract.md)

#### Inherited from

EthersContract.removeAllListeners

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:130

___

### removeListener

▸ **removeListener**(`eventName`, `listener`): [`Contract`](Contract.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `eventName` | `string` \| `EventFilter` |
| `listener` | `Listener` |

#### Returns

[`Contract`](Contract.md)

#### Inherited from

EthersContract.removeListener

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:132

___

### getContractAddress

▸ `Static` **getContractAddress**(`transaction`): `string`

#### Parameters

| Name | Type |
| :------ | :------ |
| `transaction` | `Object` |
| `transaction.from` | `string` |
| `transaction.nonce` | [`BigNumberish`](../modules.md#bignumberish) |

#### Returns

`string`

#### Inherited from

EthersContract.getContractAddress

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:108

___

### getInterface

▸ `Static` **getInterface**(`contractInterface`): [`Interface`](Utils.Interface.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `contractInterface` | `ContractInterface` |

#### Returns

[`Interface`](Utils.Interface.md)

#### Inherited from

EthersContract.getInterface

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:112

___

### isIndexed

▸ `Static` **isIndexed**(`value`): value is Indexed

#### Parameters

| Name | Type |
| :------ | :------ |
| `value` | `any` |

#### Returns

value is Indexed

#### Inherited from

EthersContract.isIndexed

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:118


================================================================================
File: docs-md\classes\ContractFactory.md
Size: 5.17 kB
================================================================================

[alchemy-sdk](../README.md) / [Exports](../modules.md) / ContractFactory

# Class: ContractFactory

The ContractFactory class is a wrapper around the ContractFactory class from
ethers.js and is exported here for convenience.

## Hierarchy

- `ContractFactory`

  ↳ **`ContractFactory`**

## Table of contents

### Constructors

- [constructor](ContractFactory.md#constructor)

### Properties

- [bytecode](ContractFactory.md#bytecode)
- [interface](ContractFactory.md#interface)
- [signer](ContractFactory.md#signer)

### Methods

- [attach](ContractFactory.md#attach)
- [connect](ContractFactory.md#connect)
- [deploy](ContractFactory.md#deploy)
- [getDeployTransaction](ContractFactory.md#getdeploytransaction)
- [fromSolidity](ContractFactory.md#fromsolidity)
- [getContract](ContractFactory.md#getcontract)
- [getContractAddress](ContractFactory.md#getcontractaddress)
- [getInterface](ContractFactory.md#getinterface)

## Constructors

### constructor

• **new ContractFactory**(`contractInterface`, `bytecode`, `signer?`)

#### Parameters

| Name | Type |
| :------ | :------ |
| `contractInterface` | `ContractInterface` |
| `bytecode` | `BytesLike` \| { `object`: `string`  } |
| `signer?` | `Signer` |

#### Inherited from

EthersContractFactory.constructor

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:141

## Properties

### bytecode

• `Readonly` **bytecode**: `string`

#### Inherited from

EthersContractFactory.bytecode

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:139

___

### interface

• `Readonly` **interface**: [`Interface`](Utils.Interface.md)

#### Inherited from

EthersContractFactory.interface

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:138

___

### signer

• `Readonly` **signer**: `Signer`

#### Inherited from

EthersContractFactory.signer

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:140

## Methods

### attach

▸ **attach**(`address`): `Contract`

#### Parameters

| Name | Type |
| :------ | :------ |
| `address` | `string` |

#### Returns

`Contract`

#### Inherited from

EthersContractFactory.attach

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:146

___

### connect

▸ **connect**(`signer`): `ContractFactory`

#### Parameters

| Name | Type |
| :------ | :------ |
| `signer` | `Signer` |

#### Returns

`ContractFactory`

#### Inherited from

EthersContractFactory.connect

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:147

___

### deploy

▸ **deploy**(...`args`): `Promise`<`Contract`\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `...args` | `any`[] |

#### Returns

`Promise`<`Contract`\>

#### Inherited from

EthersContractFactory.deploy

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:145

___

### getDeployTransaction

▸ **getDeployTransaction**(...`args`): [`TransactionRequest`](../modules.md#transactionrequest)

#### Parameters

| Name | Type |
| :------ | :------ |
| `...args` | `any`[] |

#### Returns

[`TransactionRequest`](../modules.md#transactionrequest)

#### Inherited from

EthersContractFactory.getDeployTransaction

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:144

___

### fromSolidity

▸ `Static` **fromSolidity**(`compilerOutput`, `signer?`): `ContractFactory`

#### Parameters

| Name | Type |
| :------ | :------ |
| `compilerOutput` | `any` |
| `signer?` | `Signer` |

#### Returns

`ContractFactory`

#### Inherited from

EthersContractFactory.fromSolidity

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:148

___

### getContract

▸ `Static` **getContract**(`address`, `contractInterface`, `signer?`): `Contract`

#### Parameters

| Name | Type |
| :------ | :------ |
| `address` | `string` |
| `contractInterface` | `ContractInterface` |
| `signer?` | `Signer` |

#### Returns

`Contract`

#### Inherited from

EthersContractFactory.getContract

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:154

___

### getContractAddress

▸ `Static` **getContractAddress**(`tx`): `string`

#### Parameters

| Name | Type |
| :------ | :------ |
| `tx` | `Object` |
| `tx.from` | `string` |
| `tx.nonce` | `number` \| `BytesLike` \| [`BigNumber`](BigNumber.md) |

#### Returns

`string`

#### Inherited from

EthersContractFactory.getContractAddress

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:150

___

### getInterface

▸ `Static` **getInterface**(`contractInterface`): [`Interface`](Utils.Interface.md)

#### Parameters

| Name | Type |
| :------ | :------ |
| `contractInterface` | `ContractInterface` |

#### Returns

[`Interface`](Utils.Interface.md)

#### Inherited from

EthersContractFactory.getInterface

#### Defined in

node_modules/@ethersproject/contracts/lib/index.d.ts:149


================================================================================
File: docs-md\classes\CoreNamespace.md
Size: 26.38 kB
================================================================================

[alchemy-sdk](../README.md) / [Exports](../modules.md) / CoreNamespace

# Class: CoreNamespace

The core namespace contains all commonly-used [Ethers.js
Provider](https://docs.ethers.io/v5/api/providers/api-providers/#AlchemyProvider)
methods. If you are already using Ethers.js, you should be simply able to
replace the Ethers.js Provider object with `alchemy.core` when accessing
provider methods and it should just work.

Do not call this constructor directly. Instead, instantiate an Alchemy object
with `const alchemy = new Alchemy(config)` and then access the core namespace
via `alchemy.core`.

## Table of contents

### Methods

- [call](CoreNamespace.md#call)
- [estimateGas](CoreNamespace.md#estimategas)
- [findContractDeployer](CoreNamespace.md#findcontractdeployer)
- [getAssetTransfers](CoreNamespace.md#getassettransfers)
- [getBalance](CoreNamespace.md#getbalance)
- [getBlock](CoreNamespace.md#getblock)
- [getBlockNumber](CoreNamespace.md#getblocknumber)
- [getBlockWithTransactions](CoreNamespace.md#getblockwithtransactions)
- [getCode](CoreNamespace.md#getcode)
- [getFeeData](CoreNamespace.md#getfeedata)
- [getGasPrice](CoreNamespace.md#getgasprice)
- [getLogs](CoreNamespace.md#getlogs)
- [getNetwork](CoreNamespace.md#getnetwork)
- [getStorageAt](CoreNamespace.md#getstorageat)
- [getTokenBalances](CoreNamespace.md#gettokenbalances)
- [getTokenMetadata](CoreNamespace.md#gettokenmetadata)
- [getTokensForOwner](CoreNamespace.md#gettokensforowner)
- [getTransaction](CoreNamespace.md#gettransaction)
- [getTransactionCount](CoreNamespace.md#gettransactioncount)
- [getTransactionReceipt](CoreNamespace.md#gettransactionreceipt)
- [getTransactionReceipts](CoreNamespace.md#gettransactionreceipts)
- [isContractAddress](CoreNamespace.md#iscontractaddress)
- [lookupAddress](CoreNamespace.md#lookupaddress)
- [ready](CoreNamespace.md#ready)
- [resolveName](CoreNamespace.md#resolvename)
- [send](CoreNamespace.md#send)
- [sendTransaction](CoreNamespace.md#sendtransaction)
- [waitForTransaction](CoreNamespace.md#waitfortransaction)

## Methods

### call

▸ **call**(`transaction`, `blockTag?`): `Promise`<`string`\>

Returns the result of executing the transaction, using call. A call does
not require any ether, but cannot change any state. This is useful for
calling getters on Contracts.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transaction` | `Deferrable`<[`TransactionRequest`](../modules.md#transactionrequest)\> | The transaction to execute. |
| `blockTag?` | [`BlockTag`](../modules.md#blocktag) \| `Promise`<[`BlockTag`](../modules.md#blocktag)\> | The optional block number or hash to get the call for. |

#### Returns

`Promise`<`string`\>

#### Defined in

[src/api/core-namespace.ts:242](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L242)

___

### estimateGas

▸ **estimateGas**(`transaction`): `Promise`<[`BigNumber`](BigNumber.md)\>

Returns an estimate of the amount of gas that would be required to submit
transaction to the network.

An estimate may not be accurate since there could be another transaction on
the network that was not accounted for, but after being mined affects the
relevant state.

This is an alias for [TransactNamespace.estimateGas](TransactNamespace.md#estimategas).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transaction` | `Deferrable`<[`TransactionRequest`](../modules.md#transactionrequest)\> | The transaction to estimate gas for. |

#### Returns

`Promise`<[`BigNumber`](BigNumber.md)\>

#### Defined in

[src/api/core-namespace.ts:263](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L263)

___

### findContractDeployer

▸ **findContractDeployer**(`contractAddress`): `Promise`<[`DeployResult`](../interfaces/DeployResult.md)\>

Finds the address that deployed the provided contract and block number it
was deployed in.

NOTE: This method performs a binary search across all blocks since genesis
and can take a long time to complete. This method is a convenience method
that will eventually be replaced by a single call to an Alchemy endpoint
with this information cached.

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address to find the deployer for. |

#### Returns

`Promise`<[`DeployResult`](../interfaces/DeployResult.md)\>

#### Defined in

[src/api/core-namespace.ts:384](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L384)

___

### getAssetTransfers

▸ **getAssetTransfers**(`params`): `Promise`<[`AssetTransfersWithMetadataResponse`](../interfaces/AssetTransfersWithMetadataResponse.md)\>

Get transactions for specific addresses. See the web documentation for the
full details:
https://docs.alchemy.com/alchemy/enhanced-apis/transfers-api#alchemy_getassettransfers

This overload requires [AssetTransfersWithMetadataParams.withMetadata](../interfaces/AssetTransfersWithMetadataParams.md#withmetadata)
to be set to `true`, which results in additional metadata returned in the
response object.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | [`AssetTransfersWithMetadataParams`](../interfaces/AssetTransfersWithMetadataParams.md) | An object containing fields for the asset transfer query |

#### Returns

`Promise`<[`AssetTransfersWithMetadataResponse`](../interfaces/AssetTransfersWithMetadataResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:611](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L611)

▸ **getAssetTransfers**(`params`): `Promise`<[`AssetTransfersResponse`](../interfaces/AssetTransfersResponse.md)\>

Get transactions for specific addresses. See the web documentation for the
full details:
https://docs.alchemy.com/alchemy/enhanced-apis/transfers-api#alchemy_getassettransfers

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | [`AssetTransfersParams`](../interfaces/AssetTransfersParams.md) | An object containing fields for the asset transfer query. |

#### Returns

`Promise`<[`AssetTransfersResponse`](../interfaces/AssetTransfersResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:623](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L623)

___

### getBalance

▸ **getBalance**(`addressOrName`, `blockTag?`): `Promise`<[`BigNumber`](BigNumber.md)\>

Returns the balance of a given address as of the provided block.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` \| `Promise`<`string`\> | The address or name of the account to get the balance for. |
| `blockTag?` | [`BlockTag`](../modules.md#blocktag) \| `Promise`<[`BlockTag`](../modules.md#blocktag)\> | The optional block number or hash to get the balance for.   Defaults to 'latest' if unspecified. |

#### Returns

`Promise`<[`BigNumber`](BigNumber.md)\>

#### Defined in

[src/api/core-namespace.ts:69](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L69)

___

### getBlock

▸ **getBlock**(`blockHashOrBlockTag`): `Promise`<[`Block`](../interfaces/Block.md)\>

Returns the block from the network based on the provided block number or
hash. Transactions on the block are represented as an array of transaction
hashes. To get the full transaction details on the block, use
[getBlockWithTransactions](CoreNamespace.md#getblockwithtransactions) instead.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `blockHashOrBlockTag` | [`BlockTag`](../modules.md#blocktag) \| `Promise`<[`BlockTag`](../modules.md#blocktag)\> | The block number or hash to get the block for. |

#### Returns

`Promise`<[`Block`](../interfaces/Block.md)\>

#### Defined in

[src/api/core-namespace.ts:151](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L151)

___

### getBlockNumber

▸ **getBlockNumber**(): `Promise`<`number`\>

Returns the block number of the most recently mined block.

#### Returns

`Promise`<`number`\>

#### Defined in

[src/api/core-namespace.ts:188](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L188)

___

### getBlockWithTransactions

▸ **getBlockWithTransactions**(`blockHashOrBlockTag`): `Promise`<[`BlockWithTransactions`](../interfaces/BlockWithTransactions.md)\>

Returns the block from the network based on the provided block number or
hash. Transactions on the block are represented as an array of
[TransactionResponse](../interfaces/TransactionResponse.md) objects.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `blockHashOrBlockTag` | [`BlockTag`](../modules.md#blocktag) \| `Promise`<[`BlockTag`](../modules.md#blocktag)\> | The block number or hash to get the block for. |

#### Returns

`Promise`<[`BlockWithTransactions`](../interfaces/BlockWithTransactions.md)\>

#### Defined in

[src/api/core-namespace.ts:166](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L166)

___

### getCode

▸ **getCode**(`addressOrName`, `blockTag?`): `Promise`<`string`\>

Returns the contract code of the provided address at the block. If there is
no contract deployed, the result is `0x`.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` \| `Promise`<`string`\> | The address or name of the account to get the code for. |
| `blockTag?` | [`BlockTag`](../modules.md#blocktag) \| `Promise`<[`BlockTag`](../modules.md#blocktag)\> | The optional block number or hash to get the code for.   Defaults to 'latest' if unspecified. |

#### Returns

`Promise`<`string`\>

#### Defined in

[src/api/core-namespace.ts:98](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L98)

___

### getFeeData

▸ **getFeeData**(): `Promise`<[`FeeData`](../interfaces/FeeData.md)\>

Returns the recommended fee data to use in a transaction.

For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas
should be used.

For legacy transactions and networks which do not support EIP-1559, the
gasPrice should be used.

#### Returns

`Promise`<[`FeeData`](../interfaces/FeeData.md)\>

#### Defined in

[src/api/core-namespace.ts:214](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L214)

___

### getGasPrice

▸ **getGasPrice**(): `Promise`<[`BigNumber`](BigNumber.md)\>

Returns the best guess of the current gas price to use in a transaction.

#### Returns

`Promise`<[`BigNumber`](BigNumber.md)\>

#### Defined in

[src/api/core-namespace.ts:198](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L198)

___

### getLogs

▸ **getLogs**(`filter`): `Promise`<[`Log`](../interfaces/Log.md)[]\>

Returns an array of logs that match the provided filter.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `filter` | [`Filter`](../interfaces/Filter.md) \| [`FilterByBlockHash`](../interfaces/FilterByBlockHash.md) \| `Promise`<[`Filter`](../interfaces/Filter.md) \| [`FilterByBlockHash`](../interfaces/FilterByBlockHash.md)\> | The filter object to use. |

#### Returns

`Promise`<[`Log`](../interfaces/Log.md)[]\>

#### Defined in

[src/api/core-namespace.ts:354](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L354)

___

### getNetwork

▸ **getNetwork**(): `Promise`<`Network`\>

Returns the {@link EthersNetworkAlias} Alchemy is connected to.

#### Returns

`Promise`<`Network`\>

#### Defined in

[src/api/core-namespace.ts:178](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L178)

___

### getStorageAt

▸ **getStorageAt**(`addressOrName`, `position`, `blockTag?`): `Promise`<`string`\>

Return the value of the provided position at the provided address, at the
provided block in `Bytes32` format.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` \| `Promise`<`string`\> | The address or name of the account to get the code for. |
| `position` | [`BigNumberish`](../modules.md#bignumberish) \| `Promise`<[`BigNumberish`](../modules.md#bignumberish)\> | The position of the storage slot to get. |
| `blockTag?` | [`BlockTag`](../modules.md#blocktag) \| `Promise`<[`BlockTag`](../modules.md#blocktag)\> | The optional block number or hash to get the code for.   Defaults to 'latest' if unspecified. |

#### Returns

`Promise`<`string`\>

#### Defined in

[src/api/core-namespace.ts:116](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L116)

___

### getTokenBalances

▸ **getTokenBalances**(`addressOrName`): `Promise`<[`TokenBalancesResponseErc20`](../interfaces/TokenBalancesResponseErc20.md)\>

Returns the ERC-20 token balances for a specific owner address.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` | The owner address to get the token balances for. |

#### Returns

`Promise`<[`TokenBalancesResponseErc20`](../interfaces/TokenBalancesResponseErc20.md)\>

#### Defined in

[src/api/core-namespace.ts:425](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L425)

▸ **getTokenBalances**(`addressOrName`, `contractAddresses?`): `Promise`<[`TokenBalancesResponse`](../interfaces/TokenBalancesResponse.md)\>

Returns the token balances for a specific owner address given a list of contracts.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` | The owner address to get the token balances for. |
| `contractAddresses?` | `string`[] | A list of contract addresses to check. If omitted,   all ERC-20 tokens will be checked. |

#### Returns

`Promise`<[`TokenBalancesResponse`](../interfaces/TokenBalancesResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:437](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L437)

▸ **getTokenBalances**(`addressOrName`, `options`): `Promise`<[`TokenBalancesResponseErc20`](../interfaces/TokenBalancesResponseErc20.md)\>

Returns the ERC-20 token balances for a specific owner.

This overload covers the erc-20 token type which includes a page key in the response.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` | The owner address to get the token balances for. |
| `options` | [`TokenBalancesOptionsErc20`](../interfaces/TokenBalancesOptionsErc20.md) | Token type options set to ERC-20 with optional page key. |

#### Returns

`Promise`<[`TokenBalancesResponseErc20`](../interfaces/TokenBalancesResponseErc20.md)\>

#### Defined in

[src/api/core-namespace.ts:451](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L451)

▸ **getTokenBalances**(`addressOrName`, `options`): `Promise`<[`TokenBalancesResponse`](../interfaces/TokenBalancesResponse.md)\>

Returns the token balances for a specific owner, fetching from the top 100
tokens by 24 hour volume.

This overload covers the default token type which includes a page key in
the response.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` | The owner address to get the token balances for. |
| `options` | [`TokenBalancesOptionsDefaultTokens`](../interfaces/TokenBalancesOptionsDefaultTokens.md) | Token type options set to ERC-20 with optional page key. |

#### Returns

`Promise`<[`TokenBalancesResponse`](../interfaces/TokenBalancesResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:467](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L467)

___

### getTokenMetadata

▸ **getTokenMetadata**(`address`): `Promise`<[`TokenMetadataResponse`](../interfaces/TokenMetadataResponse.md)\>

Returns metadata for a given token contract address.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `address` | `string` | The contract address to get metadata for. |

#### Returns

`Promise`<[`TokenMetadataResponse`](../interfaces/TokenMetadataResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:590](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L590)

___

### getTokensForOwner

▸ **getTokensForOwner**(`addressOrName`, `options?`): `Promise`<[`GetTokensForOwnerResponse`](../interfaces/GetTokensForOwnerResponse.md)\>

Returns the tokens that the specified address owns, along with the amount
of each token and the relevant metadata.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` | The owner address to get the tokens with balances for. |
| `options?` | [`GetTokensForOwnerOptions`](../interfaces/GetTokensForOwnerOptions.md) | Additional options to pass to the request. |

#### Returns

`Promise`<[`GetTokensForOwnerResponse`](../interfaces/GetTokensForOwnerResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:525](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L525)

___

### getTransaction

▸ **getTransaction**(`transactionHash`): `Promise`<``null`` \| [`TransactionResponse`](../interfaces/TransactionResponse.md)\>

Returns the transaction with hash or null if the transaction is unknown.

If a transaction has not been mined, this method will search the
transaction pool. Various backends may have more restrictive transaction
pool access (e.g. if the gas price is too low or the transaction was only
recently sent and not yet indexed) in which case this method may also return null.

NOTE: This is an alias for [TransactNamespace.getTransaction](TransactNamespace.md#gettransaction).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transactionHash` | `string` \| `Promise`<`string`\> | The hash of the transaction to get. |

#### Returns

`Promise`<``null`` \| [`TransactionResponse`](../interfaces/TransactionResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:283](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L283)

___

### getTransactionCount

▸ **getTransactionCount**(`addressOrName`, `blockTag?`): `Promise`<`number`\>

Returns the number of transactions ever sent from the provided address, as
of the provided block tag. This value is used as the nonce for the next
transaction from the address sent to the network.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressOrName` | `string` \| `Promise`<`string`\> | The address or name of the account to get the nonce for. |
| `blockTag?` | [`BlockTag`](../modules.md#blocktag) \| `Promise`<[`BlockTag`](../modules.md#blocktag)\> | The optional block number or hash to get the nonce for. |

#### Returns

`Promise`<`number`\>

#### Defined in

[src/api/core-namespace.ts:134](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L134)

___

### getTransactionReceipt

▸ **getTransactionReceipt**(`transactionHash`): `Promise`<``null`` \| [`TransactionReceipt`](../interfaces/TransactionReceipt.md)\>

Returns the transaction receipt for hash or null if the transaction has not
been mined.

To stall until the transaction has been mined, consider the
waitForTransaction method below.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transactionHash` | `string` \| `Promise`<`string`\> | The hash of the transaction to get. |

#### Returns

`Promise`<``null`` \| [`TransactionReceipt`](../interfaces/TransactionReceipt.md)\>

#### Defined in

[src/api/core-namespace.ts:300](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L300)

___

### getTransactionReceipts

▸ **getTransactionReceipts**(`params`): `Promise`<[`TransactionReceiptsResponse`](../interfaces/TransactionReceiptsResponse.md)\>

Gets all transaction receipts for a given block by number or block hash.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | [`TransactionReceiptsParams`](../modules.md#transactionreceiptsparams) | An object containing fields for the transaction receipt query. |

#### Returns

`Promise`<[`TransactionReceiptsResponse`](../interfaces/TransactionReceiptsResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:638](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L638)

___

### isContractAddress

▸ **isContractAddress**(`address`): `Promise`<`boolean`\>

Checks if the provided address is a smart contract.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `address` | `string` | The address to check type for. |

#### Returns

`Promise`<`boolean`\>

#### Defined in

[src/api/core-namespace.ts:83](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L83)

___

### lookupAddress

▸ **lookupAddress**(`address`): `Promise`<``null`` \| `string`\>

Performs a reverse lookup of the address in ENS using the Reverse Registrar. If the name does not exist, or the forward lookup does not match, null is returned.

An ENS name requires additional configuration to setup a reverse record, so not all ENS addresses will map back to the original ENS domain.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `address` | `string` | The address to look up the ENS domain name for. |

#### Returns

`Promise`<``null`` \| `string`\>

#### Defined in

[src/api/core-namespace.ts:662](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L662)

___

### ready

▸ **ready**(): `Promise`<`Network`\>

Returns a Promise which will stall until the network has heen established,
ignoring errors due to the target node not being active yet.

This can be used for testing or attaching scripts to wait until the node is
up and running smoothly.

#### Returns

`Promise`<`Network`\>

#### Defined in

[src/api/core-namespace.ts:228](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L228)

___

### resolveName

▸ **resolveName**(`name`): `Promise`<``null`` \| `string`\>

Returns the underlying owner address for the provided ENS address, or `null`
if the ENS name does not have an underlying address.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `name` | `string` | The ENS address name to resolve. |

#### Returns

`Promise`<``null`` \| `string`\>

#### Defined in

[src/api/core-namespace.ts:650](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L650)

___

### send

▸ **send**(`method`, `params`): `Promise`<`any`\>

Allows sending a raw message to the Alchemy backend.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `method` | `string` | The method to call. |
| `params` | `any`[] | The parameters to pass to the method. |

#### Returns

`Promise`<`any`\>

#### Defined in

[src/api/core-namespace.ts:367](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L367)

___

### sendTransaction

▸ **sendTransaction**(`signedTransaction`): `Promise`<[`TransactionResponse`](../interfaces/TransactionResponse.md)\>

Submits transaction to the network to be mined. The transaction must be
signed, and be valid (i.e. the nonce is correct and the account has
sufficient balance to pay for the transaction).

NOTE: This is an alias for [TransactNamespace.getTransaction](TransactNamespace.md#gettransaction).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `signedTransaction` | `string` \| `Promise`<`string`\> | The signed transaction to send. |

#### Returns

`Promise`<[`TransactionResponse`](../interfaces/TransactionResponse.md)\>

#### Defined in

[src/api/core-namespace.ts:317](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L317)

___

### waitForTransaction

▸ **waitForTransaction**(`transactionHash`, `confirmations?`, `timeout?`): `Promise`<``null`` \| [`TransactionReceipt`](../interfaces/TransactionReceipt.md)\>

Returns a promise which will not resolve until specified transaction hash is mined.

If {@link confirmations} is 0, this method is non-blocking and if the
transaction has not been mined returns null. Otherwise, this method will
block until the transaction has confirmed blocks mined on top of the block
in which it was mined.

NOTE: This is an alias for [TransactNamespace.getTransaction](TransactNamespace.md#gettransaction).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transactionHash` | `string` | The hash of the transaction to wait for. |
| `confirmations?` | `number` | The number of blocks to wait for. |
| `timeout?` | `number` | The maximum time to wait for the transaction to confirm. |

#### Returns

`Promise`<``null`` \| [`TransactionReceipt`](../interfaces/TransactionReceipt.md)\>

#### Defined in

[src/api/core-namespace.ts:339](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/core-namespace.ts#L339)


================================================================================
File: docs-md\classes\DebugNamespace.md
Size: 6.6 kB
================================================================================

[alchemy-sdk](../README.md) / [Exports](../modules.md) / DebugNamespace

# Class: DebugNamespace

The Debug namespace contains methods to access the non-standard RPC methods
for inspecting and debugging transactions.

For more information on the different methods and use cases please read our
[documentation](https://docs.alchemy.com/reference/debug-api-quickstart).

Do not call this constructor directly. Instead, instantiate an Alchemy object
with `const alchemy = new Alchemy(config)` and then access the debug namespace
via `alchemy.debug`.

## Table of contents

### Methods

- [traceBlock](DebugNamespace.md#traceblock)
- [traceCall](DebugNamespace.md#tracecall)
- [traceTransaction](DebugNamespace.md#tracetransaction)

## Methods

### traceBlock

▸ **traceBlock**(`blockIdentifier`, `tracer`): `Promise`<[`DebugCallTrace`](../interfaces/DebugCallTrace.md)\>

Replays a block that has already been mined.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `blockIdentifier` | `string` \| `number` | The block to debug the transaction in. Can be a block hash, block number hex string, or commitment level. |
| `tracer` | [`DebugCallTracer`](../interfaces/DebugCallTracer.md) | Tracer type and configuration. |

#### Returns

`Promise`<[`DebugCallTrace`](../interfaces/DebugCallTrace.md)\>

#### Defined in

[src/api/debug-namespace.ts:120](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/debug-namespace.ts#L120)

▸ **traceBlock**(`blockIdentifier`, `tracer`): `Promise`<[`DebugPrestateTrace`](../modules.md#debugprestatetrace)\>

Replays a block that has already been mined.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `blockIdentifier` | `string` \| `number` | The block to debug the transaction in. Can be a block hash, block number hex string, or commitment level. |
| `tracer` | [`DebugPrestateTracer`](../interfaces/DebugPrestateTracer.md) | Tracer type and configuration. |

#### Returns

`Promise`<[`DebugPrestateTrace`](../modules.md#debugprestatetrace)\>

#### Defined in

[src/api/debug-namespace.ts:131](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/debug-namespace.ts#L131)

___

### traceCall

▸ **traceCall**(`transaction`, `blockIdentifier`, `tracer`): `Promise`<[`DebugCallTrace`](../interfaces/DebugCallTrace.md)\>

Runs an `eth_call` with the context of the provided block execution using the
final state of the parent block as the base.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transaction` | [`DebugTransaction`](../interfaces/DebugTransaction.md) | The transaction to debug trace. |
| `blockIdentifier` | `string` | The block to debug the transaction in. Can be a block hash, block number hex string, or commitment level. |
| `tracer` | [`DebugCallTracer`](../interfaces/DebugCallTracer.md) | Tracer type and configuration. |

#### Returns

`Promise`<[`DebugCallTrace`](../interfaces/DebugCallTrace.md)\>

#### Defined in

[src/api/debug-namespace.ts:36](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/debug-namespace.ts#L36)

▸ **traceCall**(`transaction`, `blockIdentifier`, `tracer`): `Promise`<[`DebugPrestateTrace`](../modules.md#debugprestatetrace)\>

Runs an `eth_call` with the context of the provided block execution using the
final state of the parent block as the base.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transaction` | [`DebugTransaction`](../interfaces/DebugTransaction.md) | The transaction to debug trace. |
| `blockIdentifier` | `string` | The block to debug the transaction in. Can be a block hash, block number hex string, or commitment level. |
| `tracer` | [`DebugPrestateTracer`](../interfaces/DebugPrestateTracer.md) | Tracer type and configuration. |

#### Returns

`Promise`<[`DebugPrestateTrace`](../modules.md#debugprestatetrace)\>

#### Defined in

[src/api/debug-namespace.ts:51](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/debug-namespace.ts#L51)

___

### traceTransaction

▸ **traceTransaction**(`transactionHash`, `tracer`, `timeout?`): `Promise`<[`DebugCallTrace`](../interfaces/DebugCallTrace.md)\>

Attempts to run the transaction in the exact same manner as it was executed
on the network. It will replay any transaction that may have been executed
prior to this one before it and will then attempt to execute the transaction
that corresponds to the given hash.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transactionHash` | `string` | The transaction hash of the transaction to trace. |
| `tracer` | [`DebugCallTracer`](../interfaces/DebugCallTracer.md) | Tracer type and configuration. |
| `timeout?` | `string` | A duration string of decimal numbers that overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Max timeout is "10s". Valid time units are "ns", "us", "ms", "s" each with optional fraction, such as "300ms" or "2s45ms". |

#### Returns

`Promise`<[`DebugCallTrace`](../interfaces/DebugCallTrace.md)\>

#### Defined in

[src/api/debug-namespace.ts:79](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/debug-namespace.ts#L79)

▸ **traceTransaction**(`transactionHash`, `tracer`, `timeout?`): `Promise`<[`DebugPrestateTrace`](../modules.md#debugprestatetrace)\>

Attempts to run the transaction in the exact same manner as it was executed
on the network. It will replay any transaction that may have been executed
prior to this one before it and will then attempt to execute the transaction
that corresponds to the given hash.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `transactionHash` | `string` | The transaction hash of the transaction to trace. |
| `tracer` | [`DebugPrestateTracer`](../interfaces/DebugPrestateTracer.md) | Tracer type and configuration. |
| `timeout?` | `string` | A duration string of decimal numbers that overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Max timeout is "10s". Valid time units are "ns", "us", "ms", "s" each with optional fraction, such as "300ms" or "2s45ms". |

#### Returns

`Promise`<[`DebugPrestateTrace`](../modules.md#debugprestatetrace)\>

#### Defined in

[src/api/debug-namespace.ts:98](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/debug-namespace.ts#L98)


================================================================================
File: docs-md\classes\NftNamespace.md
Size: 29.57 kB
================================================================================

[alchemy-sdk](../README.md) / [Exports](../modules.md) / NftNamespace

# Class: NftNamespace

The NFT namespace contains all the functionality related to NFTs.

Do not call this constructor directly. Instead, instantiate an Alchemy object
with `const alchemy = new Alchemy(config)` and then access the core namespace
via `alchemy.nft`.

## Table of contents

### Methods

- [computeRarity](NftNamespace.md#computerarity)
- [getCollectionMetadata](NftNamespace.md#getcollectionmetadata)
- [getContractMetadata](NftNamespace.md#getcontractmetadata)
- [getContractMetadataBatch](NftNamespace.md#getcontractmetadatabatch)
- [getContractsForOwner](NftNamespace.md#getcontractsforowner)
- [getFloorPrice](NftNamespace.md#getfloorprice)
- [getMintedNfts](NftNamespace.md#getmintednfts)
- [getNftMetadata](NftNamespace.md#getnftmetadata)
- [getNftMetadataBatch](NftNamespace.md#getnftmetadatabatch)
- [getNftSales](NftNamespace.md#getnftsales)
- [getNftsForContract](NftNamespace.md#getnftsforcontract)
- [getNftsForContractIterator](NftNamespace.md#getnftsforcontractiterator)
- [getNftsForOwner](NftNamespace.md#getnftsforowner)
- [getNftsForOwnerIterator](NftNamespace.md#getnftsforowneriterator)
- [getOwnersForContract](NftNamespace.md#getownersforcontract)
- [getOwnersForNft](NftNamespace.md#getownersfornft)
- [getSpamContracts](NftNamespace.md#getspamcontracts)
- [getTransfersForContract](NftNamespace.md#gettransfersforcontract)
- [getTransfersForOwner](NftNamespace.md#gettransfersforowner)
- [isAirdropNft](NftNamespace.md#isairdropnft)
- [isSpamContract](NftNamespace.md#isspamcontract)
- [refreshContract](NftNamespace.md#refreshcontract)
- [refreshNftMetadata](NftNamespace.md#refreshnftmetadata)
- [reportSpam](NftNamespace.md#reportspam)
- [searchContractMetadata](NftNamespace.md#searchcontractmetadata)
- [summarizeNftAttributes](NftNamespace.md#summarizenftattributes)
- [verifyNftOwnership](NftNamespace.md#verifynftownership)

## Methods

### computeRarity

▸ **computeRarity**(`contractAddress`, `tokenId`): `Promise`<[`ComputeRarityResponse`](../interfaces/ComputeRarityResponse.md)\>

Get the rarity of each attribute of an NFT.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | Contract address for the NFT collection. |
| `tokenId` | [`BigNumberish`](../modules.md#bignumberish) | Token id of the NFT. |

#### Returns

`Promise`<[`ComputeRarityResponse`](../interfaces/ComputeRarityResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:534](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L534)

___

### getCollectionMetadata

▸ **getCollectionMetadata**(`collectionSlug`): `Promise`<[`NftCollection`](../interfaces/NftCollection.md)\>

Get the NFT collection metadata associated with the provided parameters.

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `collectionSlug` | `string` | The OpenSea collection slug of the NFT. |

#### Returns

`Promise`<[`NftCollection`](../interfaces/NftCollection.md)\>

#### Defined in

[src/api/nft-namespace.ts:168](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L168)

___

### getContractMetadata

▸ **getContractMetadata**(`contractAddress`): `Promise`<[`NftContract`](../interfaces/NftContract.md)\>

Get the NFT contract metadata associated with the provided parameters.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address of the NFT. |

#### Returns

`Promise`<[`NftContract`](../interfaces/NftContract.md)\>

#### Defined in

[src/api/nft-namespace.ts:147](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L147)

___

### getContractMetadataBatch

▸ **getContractMetadataBatch**(`contractAddresses`): `Promise`<[`GetContractMetadataBatchResponse`](../interfaces/GetContractMetadataBatchResponse.md)\>

Get the NFT contract metadata for multiple NFT contracts in a single request.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddresses` | `string`[] | An array of contract addresses to fetch metadata for. |

#### Returns

`Promise`<[`GetContractMetadataBatchResponse`](../interfaces/GetContractMetadataBatchResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:156](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L156)

___

### getContractsForOwner

▸ **getContractsForOwner**(`owner`, `options?`): `Promise`<[`GetContractsForOwnerResponse`](../interfaces/GetContractsForOwnerResponse.md)\>

Gets all NFT contracts held by the specified owner address.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | Address for NFT owner (can be in ENS format!). |
| `options?` | [`GetContractsForOwnerOptions`](../interfaces/GetContractsForOwnerOptions.md) | The optional parameters to use for the request. |

#### Returns

`Promise`<[`GetContractsForOwnerResponse`](../interfaces/GetContractsForOwnerResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:378](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L378)

___

### getFloorPrice

▸ **getFloorPrice**(`contractAddress`): `Promise`<[`GetFloorPriceResponse`](../interfaces/GetFloorPriceResponse.md)\>

Returns the floor prices of a NFT contract by marketplace.

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address for the NFT collection. |

#### Returns

`Promise`<[`GetFloorPriceResponse`](../interfaces/GetFloorPriceResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:508](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L508)

___

### getMintedNfts

▸ **getMintedNfts**(`owner`, `options?`): `Promise`<[`TransfersNftResponse`](../interfaces/TransfersNftResponse.md)\>

Get all the NFTs minted by a specified owner address.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | Address for the NFT owner (can be in ENS format). |
| `options?` | [`GetMintedNftsOptions`](../interfaces/GetMintedNftsOptions.md) | The optional parameters to use for the request. |

#### Returns

`Promise`<[`TransfersNftResponse`](../interfaces/TransfersNftResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:422](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L422)

___

### getNftMetadata

▸ **getNftMetadata**(`contractAddress`, `tokenId`, `options?`): `Promise`<[`Nft`](../interfaces/Nft.md)\>

Get the NFT metadata associated with the provided parameters.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address of the NFT. |
| `tokenId` | [`BigNumberish`](../modules.md#bignumberish) | Token id of the NFT. |
| `options?` | [`GetNftMetadataOptions`](../interfaces/GetNftMetadataOptions.md) | Options for the request. |

#### Returns

`Promise`<[`Nft`](../interfaces/Nft.md)\>

#### Defined in

[src/api/nft-namespace.ts:101](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L101)

___

### getNftMetadataBatch

▸ **getNftMetadataBatch**(`tokens`, `options?`): `Promise`<[`GetNftMetadataBatchResponse`](../interfaces/GetNftMetadataBatchResponse.md)\>

Gets the NFT metadata for multiple NFT tokens.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `tokens` | [`NftMetadataBatchToken`](../interfaces/NftMetadataBatchToken.md)[] | An array of NFT tokens to fetch metadata for. |
| `options?` | [`NftMetadataBatchOptions`](../interfaces/NftMetadataBatchOptions.md) | Configuration options for making the request. |

#### Returns

`Promise`<[`GetNftMetadataBatchResponse`](../interfaces/GetNftMetadataBatchResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:134](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L134)

___

### getNftSales

▸ **getNftSales**(`options?`): `Promise`<[`GetNftSalesResponse`](../interfaces/GetNftSalesResponse.md)\>

Returns NFT sales that have happened through on-chain marketplaces.

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `options?` | [`GetNftSalesOptions`](../interfaces/GetNftSalesOptions.md) | The optional parameters to use for the request. |

#### Returns

`Promise`<[`GetNftSalesResponse`](../interfaces/GetNftSalesResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:518](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L518)

▸ **getNftSales**(`options?`): `Promise`<[`GetNftSalesResponse`](../interfaces/GetNftSalesResponse.md)\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `options?` | [`GetNftSalesOptionsByContractAddress`](../interfaces/GetNftSalesOptionsByContractAddress.md) |

#### Returns

`Promise`<[`GetNftSalesResponse`](../interfaces/GetNftSalesResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:519](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L519)

___

### getNftsForContract

▸ **getNftsForContract**(`contractAddress`, `options?`): `Promise`<[`NftContractNftsResponse`](../interfaces/NftContractNftsResponse.md)\>

Get all NFTs for a given contract address.

This method returns the full NFTs in the contract. To get all NFTs without
their associated metadata, use [GetBaseNftsForContractOptions](../interfaces/GetBaseNftsForContractOptions.md).

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address of the NFT contract. |
| `options?` | [`GetNftsForContractOptions`](../interfaces/GetNftsForContractOptions.md) | The parameters to use for the request. or   [NftContractNftsResponse](../interfaces/NftContractNftsResponse.md) response. |

#### Returns

`Promise`<[`NftContractNftsResponse`](../interfaces/NftContractNftsResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:253](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L253)

▸ **getNftsForContract**(`contractAddress`, `options?`): `Promise`<[`NftContractBaseNftsResponse`](../interfaces/NftContractBaseNftsResponse.md)\>

Get all base NFTs for a given contract address.

This method returns the base NFTs that omit the associated metadata. To get
all NFTs with their associated metadata, use [GetNftsForContractOptions](../interfaces/GetNftsForContractOptions.md).

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address of the NFT contract. |
| `options?` | [`GetBaseNftsForContractOptions`](../interfaces/GetBaseNftsForContractOptions.md) | The optional parameters to use for the request. |

#### Returns

`Promise`<[`NftContractBaseNftsResponse`](../interfaces/NftContractBaseNftsResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:267](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L267)

___

### getNftsForContractIterator

▸ **getNftsForContractIterator**(`contractAddress`, `options?`): `AsyncIterable`<[`Nft`](../interfaces/Nft.md)\>

Fetches all NFTs for a given contract address and yields them in an async iterable.

This method returns the full NFTs in the contract and pages through all
page keys until all NFTs have been fetched. To get all NFTs without their
associated metadata, use [GetBaseNftsForContractOptions](../interfaces/GetBaseNftsForContractOptions.md).

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address of the NFT contract. |
| `options?` | [`GetNftsForContractOptions`](../interfaces/GetNftsForContractOptions.md) | The optional parameters to use for the request. |

#### Returns

`AsyncIterable`<[`Nft`](../interfaces/Nft.md)\>

#### Defined in

[src/api/nft-namespace.ts:289](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L289)

▸ **getNftsForContractIterator**(`contractAddress`, `options?`): `AsyncIterable`<[`BaseNft`](../interfaces/BaseNft.md)\>

Fetches all base NFTs for a given contract address and yields them in an
async iterable.

This method returns the base NFTs that omit the associated metadata and
pages through all page keys until all NFTs have been fetched. To get all
NFTs with their associated metadata, use [GetNftsForContractOptions](../interfaces/GetNftsForContractOptions.md).

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address of the NFT contract. |
| `options?` | [`GetBaseNftsForContractOptions`](../interfaces/GetBaseNftsForContractOptions.md) | The optional parameters to use for the request. |

#### Returns

`AsyncIterable`<[`BaseNft`](../interfaces/BaseNft.md)\>

#### Defined in

[src/api/nft-namespace.ts:305](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L305)

___

### getNftsForOwner

▸ **getNftsForOwner**(`owner`, `options`): `Promise`<[`OwnedBaseNftsResponse`](../interfaces/OwnedBaseNftsResponse.md)\>

Get all base NFTs for an owner.

This method returns the base NFTs that omit the associated metadata. To get
all NFTs with their associated metadata, use [GetNftsForOwnerOptions](../interfaces/GetNftsForOwnerOptions.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | The address of the owner. |
| `options` | [`GetBaseNftsForOwnerOptions`](../interfaces/GetBaseNftsForOwnerOptions.md) | The optional parameters to use for the request. |

#### Returns

`Promise`<[`OwnedBaseNftsResponse`](../interfaces/OwnedBaseNftsResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:217](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L217)

▸ **getNftsForOwner**(`owner`, `options?`): `Promise`<[`OwnedNftsResponse`](../interfaces/OwnedNftsResponse.md)\>

Get all NFTs for an owner.

This method returns the full NFTs in the contract. To get all NFTs without
their associated metadata, use [GetBaseNftsForOwnerOptions](../interfaces/GetBaseNftsForOwnerOptions.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | The address of the owner. |
| `options?` | [`GetNftsForOwnerOptions`](../interfaces/GetNftsForOwnerOptions.md) | The optional parameters to use for the request. |

#### Returns

`Promise`<[`OwnedNftsResponse`](../interfaces/OwnedNftsResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:231](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L231)

___

### getNftsForOwnerIterator

▸ **getNftsForOwnerIterator**(`owner`, `options?`): `AsyncIterable`<[`OwnedNft`](../interfaces/OwnedNft.md)\>

Fetches all NFTs for a given owner and yields them in an async iterable.

This method returns the full NFT for the owner and pages through all page
keys until all NFTs have been fetched.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | The address of the owner. |
| `options?` | [`GetNftsForOwnerOptions`](../interfaces/GetNftsForOwnerOptions.md) | The optional parameters to use for the request. |

#### Returns

`AsyncIterable`<[`OwnedNft`](../interfaces/OwnedNft.md)\>

#### Defined in

[src/api/nft-namespace.ts:182](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L182)

▸ **getNftsForOwnerIterator**(`owner`, `options?`): `AsyncIterable`<[`OwnedBaseNft`](../interfaces/OwnedBaseNft.md)\>

Fetches all NFTs for a given owner and yields them in an async iterable.

This method returns the base NFTs that omit the associated metadata and
pages through all page keys until all NFTs have been fetched.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | The address of the owner. |
| `options?` | [`GetBaseNftsForOwnerOptions`](../interfaces/GetBaseNftsForOwnerOptions.md) | The optional parameters to use for the request. |

#### Returns

`AsyncIterable`<[`OwnedBaseNft`](../interfaces/OwnedBaseNft.md)\>

#### Defined in

[src/api/nft-namespace.ts:196](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L196)

___

### getOwnersForContract

▸ **getOwnersForContract**(`contractAddress`, `options`): `Promise`<[`GetOwnersForContractWithTokenBalancesResponse`](../interfaces/GetOwnersForContractWithTokenBalancesResponse.md)\>

Gets all the owners for a given NFT contract along with the token balance.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The NFT contract to get the owners for. |
| `options` | [`GetOwnersForContractWithTokenBalancesOptions`](../interfaces/GetOwnersForContractWithTokenBalancesOptions.md) | Optional parameters to use for the request. |

#### Returns

`Promise`<[`GetOwnersForContractWithTokenBalancesResponse`](../interfaces/GetOwnersForContractWithTokenBalancesResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:323](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L323)

▸ **getOwnersForContract**(`contractAddress`, `options?`): `Promise`<[`GetOwnersForContractResponse`](../interfaces/GetOwnersForContractResponse.md)\>

Gets all the owners for a given NFT contract.

Note that token balances are omitted by default. To include token balances
for each owner, use [GetOwnersForContractWithTokenBalancesOptions](../interfaces/GetOwnersForContractWithTokenBalancesOptions.md),
which has the `withTokenBalances` field set to `true`.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The NFT contract to get the owners for. |
| `options?` | [`GetOwnersForContractOptions`](../interfaces/GetOwnersForContractOptions.md) | Optional parameters to use for the request. |

#### Returns

`Promise`<[`GetOwnersForContractResponse`](../interfaces/GetOwnersForContractResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:339](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L339)

___

### getOwnersForNft

▸ **getOwnersForNft**(`contractAddress`, `tokenId`, `options?`): `Promise`<[`GetOwnersForNftResponse`](../interfaces/GetOwnersForNftResponse.md)\>

Gets all the owners for a given NFT contract address and token ID.

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The NFT contract address. |
| `tokenId` | [`BigNumberish`](../modules.md#bignumberish) | Token id of the NFT. |
| `options?` | [`GetOwnersForNftOptions`](../interfaces/GetOwnersForNftOptions.md) | Optional parameters to use for the request. |

#### Returns

`Promise`<[`GetOwnersForNftResponse`](../interfaces/GetOwnersForNftResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:362](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L362)

___

### getSpamContracts

▸ **getSpamContracts**(): `Promise`<[`GetSpamContractsResponse`](../interfaces/GetSpamContractsResponse.md)\>

Returns a list of all spam contracts marked by Alchemy. For details on how
Alchemy marks spam contracts, go to
https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.

#### Returns

`Promise`<[`GetSpamContractsResponse`](../interfaces/GetSpamContractsResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:472](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L472)

___

### getTransfersForContract

▸ **getTransfersForContract**(`contract`, `options?`): `Promise`<[`TransfersNftResponse`](../interfaces/TransfersNftResponse.md)\>

Gets all NFT transfers for a given NFT contract address.

Defaults to all transfers for the contract. To get transfers for a specific
block range, use [GetTransfersForContractOptions](../interfaces/GetTransfersForContractOptions.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contract` | `string` | The NFT contract to get transfers for. |
| `options?` | [`GetTransfersForContractOptions`](../interfaces/GetTransfersForContractOptions.md) | Additional options for the request. |

#### Returns

`Promise`<[`TransfersNftResponse`](../interfaces/TransfersNftResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:409](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L409)

___

### getTransfersForOwner

▸ **getTransfersForOwner**(`owner`, `category`, `options?`): `Promise`<[`TransfersNftResponse`](../interfaces/TransfersNftResponse.md)\>

Gets all NFT transfers for a given owner's address.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | The owner to get transfers for. |
| `category` | [`GetTransfersForOwnerTransferType`](../enums/GetTransfersForOwnerTransferType.md) | Whether to get transfers to or from the owner address. |
| `options?` | [`GetTransfersForOwnerOptions`](../interfaces/GetTransfersForOwnerOptions.md) | Additional options for the request. |

#### Returns

`Promise`<[`TransfersNftResponse`](../interfaces/TransfersNftResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:392](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L392)

___

### isAirdropNft

▸ **isAirdropNft**(`contractAddress`, `tokenId`): `Promise`<[`IsAirdropNftResponse`](../interfaces/IsAirdropNftResponse.md)\>

Returns whether a token is marked as an airdrop or not.
Airdrops are defined as NFTs that were minted to a user address in a transaction
sent by a different address.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address to check. |
| `tokenId` | `string` | Token id of the NFT. |

#### Returns

`Promise`<[`IsAirdropNftResponse`](../interfaces/IsAirdropNftResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:495](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L495)

___

### isSpamContract

▸ **isSpamContract**(`contractAddress`): `Promise`<[`IsSpamContractResponse`](../interfaces/IsSpamContractResponse.md)\>

Returns whether a contract is marked as spam or not by Alchemy. For more
information on how we classify spam, go to our NFT API FAQ at
https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address to check. |

#### Returns

`Promise`<[`IsSpamContractResponse`](../interfaces/IsSpamContractResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:463](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L463)

___

### refreshContract

▸ **refreshContract**(`contractAddress`): `Promise`<[`RefreshContractResult`](../interfaces/RefreshContractResult.md)\>

Triggers a metadata refresh all NFTs in the provided contract address. This
method is useful after an NFT collection is revealed.

Refreshes are queued on the Alchemy backend and may take time to fully
process. To refresh the metadata for a specific token, use the
[refreshNftMetadata](NftNamespace.md#refreshnftmetadata) method instead.

**`beta`**

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address of the NFT collection. |

#### Returns

`Promise`<[`RefreshContractResult`](../interfaces/RefreshContractResult.md)\>

#### Defined in

[src/api/nft-namespace.ts:596](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L596)

___

### refreshNftMetadata

▸ **refreshNftMetadata**(`contractAddress`, `tokenId`): `Promise`<`boolean`\>

Refreshes the cached metadata for a provided NFT contract address and token
id. Returns a boolean value indicating whether the metadata was refreshed.

This method is useful when you want to refresh the metadata for a NFT that
has been updated since the last time it was fetched. Note that the backend
only allows one refresh per token every 15 minutes, globally for all users.
The last refresh time for an NFT can be accessed on the
[Nft.timeLastUpdated](../interfaces/Nft.md#timelastupdated) field.

To trigger a refresh for all NFTs in a contract, use [refreshContract](NftNamespace.md#refreshcontract) instead.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address of the NFT. |
| `tokenId` | [`BigNumberish`](../modules.md#bignumberish) | The token id of the NFT. |

#### Returns

`Promise`<`boolean`\>

#### Defined in

[src/api/nft-namespace.ts:578](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L578)

___

### reportSpam

▸ **reportSpam**(`contractAddress`): `Promise`<`void`\>

Returns whether a contract is marked as spam or not by Alchemy. For more
information on how we classify spam, go to our NFT API FAQ at
https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | The contract address to check. |

#### Returns

`Promise`<`void`\>

#### Defined in

[src/api/nft-namespace.ts:483](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L483)

___

### searchContractMetadata

▸ **searchContractMetadata**(`query`): `Promise`<[`SearchContractMetadataResponse`](../interfaces/SearchContractMetadataResponse.md)\>

Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `query` | `string` | The search string that you want to search for in contract metadata. |

#### Returns

`Promise`<[`SearchContractMetadataResponse`](../interfaces/SearchContractMetadataResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:546](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L546)

___

### summarizeNftAttributes

▸ **summarizeNftAttributes**(`contractAddress`): `Promise`<[`NftAttributesResponse`](../interfaces/NftAttributesResponse.md)\>

Get a summary of attribute prevalence for an NFT collection.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractAddress` | `string` | Contract address for the NFT collection. |

#### Returns

`Promise`<[`NftAttributesResponse`](../interfaces/NftAttributesResponse.md)\>

#### Defined in

[src/api/nft-namespace.ts:557](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L557)

___

### verifyNftOwnership

▸ **verifyNftOwnership**(`owner`, `contractAddress`): `Promise`<`boolean`\>

Checks that the provided owner address owns one of more of the provided
NFT. Returns a boolean indicating whether the owner address owns the provided NFT.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | The owner address to check. |
| `contractAddress` | `string` | An NFT contract address to check ownership for. |

#### Returns

`Promise`<`boolean`\>

#### Defined in

[src/api/nft-namespace.ts:436](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L436)

▸ **verifyNftOwnership**(`owner`, `contractAddresses`): `Promise`<{ `[contractAddress: string]`: `boolean`;  }\>

Checks which of the provided NFTs the owner address owns. Returns a map of
contract address to a boolean indicating whether the owner address owns the NFT.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `owner` | `string` | The owner address to check. |
| `contractAddresses` | `string`[] | An array NFT contract address to check ownership for. |

#### Returns

`Promise`<{ `[contractAddress: string]`: `boolean`;  }\>

#### Defined in

[src/api/nft-namespace.ts:445](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/nft-namespace.ts#L445)


================================================================================
File: docs-md\classes\NotifyNamespace.md
Size: 18.26 kB
================================================================================

[alchemy-sdk](../README.md) / [Exports](../modules.md) / NotifyNamespace

# Class: NotifyNamespace

The Notify namespace contains methods used for creating, reading, updating,
and deleting webhooks in the Notify API.

To use the methods in the API, you must provide your team's auth token in the
[AlchemySettings.authToken](../interfaces/AlchemySettings.md#authtoken) field when configuring
[AlchemySettings](../interfaces/AlchemySettings.md). The auth token can be found in the Alchemy Dashboard
on the Notify tab.

Note that not all networks are supported in the Notify API. Please consult
the documentation for which networks are supported.

Do not call this constructor directly. Instead, instantiate an Alchemy object
with `const alchemy = new Alchemy(config)` and then access the notify
namespace via `alchemy.notify`.

## Table of contents

### Methods

- [createWebhook](NotifyNamespace.md#createwebhook)
- [deleteWebhook](NotifyNamespace.md#deletewebhook)
- [getAddresses](NotifyNamespace.md#getaddresses)
- [getAllWebhooks](NotifyNamespace.md#getallwebhooks)
- [getGraphqlQuery](NotifyNamespace.md#getgraphqlquery)
- [getNftFilters](NotifyNamespace.md#getnftfilters)
- [sendWebhookRequest](NotifyNamespace.md#sendwebhookrequest)
- [updateWebhook](NotifyNamespace.md#updatewebhook)
- [verifyConfig](NotifyNamespace.md#verifyconfig)

## Methods

### createWebhook

▸ **createWebhook**(`url`, `type`, `params`): `Promise`<[`CustomGraphqlWebhook`](../interfaces/CustomGraphqlWebhook.md)\>

Create a new [CustomGraphqlWebhook](../interfaces/CustomGraphqlWebhook.md) to track any event on every block.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `url` | `string` | The URL that the webhook should send events to. |
| `type` | [`GRAPHQL`](../enums/WebhookType.md#graphql) | The type of webhook to create. |
| `params` | [`CustomGraphqlWebhookParams`](../interfaces/CustomGraphqlWebhookParams.md) | Parameters object containing the graphql query to be executed on every block |

#### Returns

`Promise`<[`CustomGraphqlWebhook`](../interfaces/CustomGraphqlWebhook.md)\>

#### Defined in

[src/api/notify-namespace.ts:356](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L356)

▸ **createWebhook**(`url`, `type`, `params`): `Promise`<[`MinedTransactionWebhook`](../interfaces/MinedTransactionWebhook.md)\>

Create a new [MinedTransactionWebhook](../interfaces/MinedTransactionWebhook.md) to track mined transactions
sent by the app associated with the app id.

Note that the webhook will be created in the app network of the provided app id.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `url` | `string` | The URL that the webhook should send events to. |
| `type` | [`MINED_TRANSACTION`](../enums/WebhookType.md#mined_transaction) | The type of webhook to create. |
| `params` | [`TransactionWebhookParams`](../interfaces/TransactionWebhookParams.md) | Parameters object containing the app id. |

#### Returns

`Promise`<[`MinedTransactionWebhook`](../interfaces/MinedTransactionWebhook.md)\>

#### Defined in

[src/api/notify-namespace.ts:373](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L373)

▸ **createWebhook**(`url`, `type`, `params`): `Promise`<[`DroppedTransactionWebhook`](../interfaces/DroppedTransactionWebhook.md)\>

Create a new [DroppedTransactionWebhook](../interfaces/DroppedTransactionWebhook.md) to track dropped transactions
sent by the app associated with the app id.

Note that the webhook will be created in the app network of the provided app id.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `url` | `string` | The URL that the webhook should send events to. |
| `type` | [`DROPPED_TRANSACTION`](../enums/WebhookType.md#dropped_transaction) | The type of webhook to create. |
| `params` | [`TransactionWebhookParams`](../interfaces/TransactionWebhookParams.md) | Parameters object containing the app id. |

#### Returns

`Promise`<[`DroppedTransactionWebhook`](../interfaces/DroppedTransactionWebhook.md)\>

#### Defined in

[src/api/notify-namespace.ts:390](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L390)

▸ **createWebhook**(`url`, `type`, `params`): `Promise`<[`NftActivityWebhook`](../interfaces/NftActivityWebhook.md)\>

Create a new [NftActivityWebhook](../interfaces/NftActivityWebhook.md) to track NFT transfers.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `url` | `string` | The URL that the webhook should send events to. |
| `type` | [`NFT_ACTIVITY`](../enums/WebhookType.md#nft_activity) | The type of webhook to create. |
| `params` | [`NftWebhookParams`](../interfaces/NftWebhookParams.md) | Parameters object containing the NFTs to track and the   network the webhook should be created on. |

#### Returns

`Promise`<[`NftActivityWebhook`](../interfaces/NftActivityWebhook.md)\>

#### Defined in

[src/api/notify-namespace.ts:404](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L404)

▸ **createWebhook**(`url`, `type`, `params`): `Promise`<[`NftMetadataUpdateWebhook`](../interfaces/NftMetadataUpdateWebhook.md)\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `url` | `string` |
| `type` | [`NFT_METADATA_UPDATE`](../enums/WebhookType.md#nft_metadata_update) |
| `params` | [`NftWebhookParams`](../interfaces/NftWebhookParams.md) |

#### Returns

`Promise`<[`NftMetadataUpdateWebhook`](../interfaces/NftMetadataUpdateWebhook.md)\>

#### Defined in

[src/api/notify-namespace.ts:410](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L410)

▸ **createWebhook**(`url`, `type`, `params`): `Promise`<[`AddressActivityWebhook`](../interfaces/AddressActivityWebhook.md)\>

Create a new [AddressActivityWebhook](../interfaces/AddressActivityWebhook.md) to track address activity.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `url` | `string` | The URL that the webhook should send events to. |
| `type` | [`ADDRESS_ACTIVITY`](../enums/WebhookType.md#address_activity) | The type of webhook to create. |
| `params` | [`AddressWebhookParams`](../interfaces/AddressWebhookParams.md) | Parameters object containing the addresses to track and the   network the webhook should be created on. |

#### Returns

`Promise`<[`AddressActivityWebhook`](../interfaces/AddressActivityWebhook.md)\>

#### Defined in

[src/api/notify-namespace.ts:424](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L424)

___

### deleteWebhook

▸ **deleteWebhook**(`webhook`): `Promise`<`void`\>

Delete the provided webhook.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `webhook` | [`Webhook`](../interfaces/Webhook.md) | The webhook to delete. |

#### Returns

`Promise`<`void`\>

#### Defined in

[src/api/notify-namespace.ts:552](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L552)

▸ **deleteWebhook**(`webhookId`): `Promise`<`void`\>

Delete the provided webhook.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `webhookId` | `string` | The id of the webhook to delete. |

#### Returns

`Promise`<`void`\>

#### Defined in

[src/api/notify-namespace.ts:559](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L559)

___

### getAddresses

▸ **getAddresses**(`addressWebhook`, `options?`): `Promise`<[`AddressActivityResponse`](../interfaces/AddressActivityResponse.md)\>

Get all addresses tracked for the provided [AddressActivityWebhook](../interfaces/AddressActivityWebhook.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `addressWebhook` | [`AddressActivityWebhook`](../interfaces/AddressActivityWebhook.md) | The Address Activity webhook. |
| `options?` | [`GetAddressesOptions`](../interfaces/GetAddressesOptions.md) | Pagination options when fetching addresses. |

#### Returns

`Promise`<[`AddressActivityResponse`](../interfaces/AddressActivityResponse.md)\>

#### Defined in

[src/api/notify-namespace.ts:91](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L91)

▸ **getAddresses**(`webhookId`, `options?`): `Promise`<[`AddressActivityResponse`](../interfaces/AddressActivityResponse.md)\>

Get all addresses tracked for the provided [AddressActivityWebhook](../interfaces/AddressActivityWebhook.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `webhookId` | `string` | The id of the address activity webhook. Passing in an id   of a non-address-activity webhook will result in a response object with   no addresses. |
| `options?` | [`GetAddressesOptions`](../interfaces/GetAddressesOptions.md) | Pagination options when fetching addresses. |

#### Returns

`Promise`<[`AddressActivityResponse`](../interfaces/AddressActivityResponse.md)\>

#### Defined in

[src/api/notify-namespace.ts:104](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L104)

___

### getAllWebhooks

▸ **getAllWebhooks**(): `Promise`<[`GetAllWebhooksResponse`](../interfaces/GetAllWebhooksResponse.md)\>

Get all webhooks on your team.

The team is determined by the `authToken` provided into the [AlchemySettings](../interfaces/AlchemySettings.md)
object when creating a new [Alchemy](Alchemy.md) instance.

This method returns a response object containing all the webhooks

#### Returns

`Promise`<[`GetAllWebhooksResponse`](../interfaces/GetAllWebhooksResponse.md)\>

#### Defined in

[src/api/notify-namespace.ts:72](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L72)

___

### getGraphqlQuery

▸ **getGraphqlQuery**(`customGraphqlWebhook`): `Promise`<[`CustomGraphqlWebhookConfig`](../interfaces/CustomGraphqlWebhookConfig.md)\>

Get the graphql query used for the provided [CustomGraphqlWebhook](../interfaces/CustomGraphqlWebhook.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `customGraphqlWebhook` | [`CustomGraphqlWebhook`](../interfaces/CustomGraphqlWebhook.md) | The webhook to get the graphql query for. |

#### Returns

`Promise`<[`CustomGraphqlWebhookConfig`](../interfaces/CustomGraphqlWebhookConfig.md)\>

#### Defined in

[src/api/notify-namespace.ts:132](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L132)

▸ **getGraphqlQuery**(`webhookId`): `Promise`<[`CustomGraphqlWebhookConfig`](../interfaces/CustomGraphqlWebhookConfig.md)\>

Get the graphql query used for the provided [CustomGraphqlWebhook](../interfaces/CustomGraphqlWebhook.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `webhookId` | `string` | The id of the custom webhook. Passing in an id   of a non-custom webhook will result in a response object with   no graphql query. |

#### Returns

`Promise`<[`CustomGraphqlWebhookConfig`](../interfaces/CustomGraphqlWebhookConfig.md)\>

#### Defined in

[src/api/notify-namespace.ts:143](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L143)

___

### getNftFilters

▸ **getNftFilters**(`nftWebhook`, `options?`): `Promise`<[`NftFiltersResponse`](../interfaces/NftFiltersResponse.md)\>

Get all NFTs tracked for the provided [NftActivityWebhook](../interfaces/NftActivityWebhook.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `nftWebhook` | [`NftActivityWebhook`](../interfaces/NftActivityWebhook.md) | The NFT Activity webhook. |
| `options?` | [`GetAddressesOptions`](../interfaces/GetAddressesOptions.md) | Pagination options when fetching NFT filters. |

#### Returns

`Promise`<[`NftFiltersResponse`](../interfaces/NftFiltersResponse.md)\>

#### Defined in

[src/api/notify-namespace.ts:167](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/api/notify-namespace.ts#L167)

▸ **getNftFilters**(`webhookId`, `options?`): `Promise`<[`NftFiltersResponse`](../interfaces/NftFiltersResponse.md)\>

Get all NFT filters tracked for the provided [NftActivityWebhook](../interfaces/NftActivityWebhook.md).

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `webhookId` | `string` | The id of the NFT activity webhook. Passing in an   incorrect id of a non-NFT webhook will result in a response object with   no filters. |
| `options?` | [`GetAddressesOptions`](../interfaces/GetAddressesOptions.md) | Pagination options when fetching nft filters. |

#### Returns

`Promise`<[`NftFiltersResponse`](../interfaces/NftFiltersResponse.md)\>

#### Defined in
